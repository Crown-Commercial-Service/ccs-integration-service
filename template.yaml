AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'api-gateway-test

  SAM Template for creating esource API

  '
Globals:
  Api:
    OpenApiVersion: '3.0.0'

Parameters:
  MajorVersion:
    Default: "0"
    Description: Minor version of the API
    Type: String
  MinorVersion:
    Default: "1"
    Description: Minor version of the API
    Type: String
  CognitoUserPoolId:
    Description: 'User Pool Id for the Cognito User Pool used with the API.'
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/esource/cognito/COGNITO_USER_POOL_ID'
  CognitoClientId:
    Description: 'Client Id for the Cognito User Pool used with the API.'
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/esource/cognito/COGNITO_CLIENT_ID'
  JaggaerAuthUsername:
    Description: 'Username for accessing the Jaggaer integration.'
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/esource/jaggaer/JAGGAER_AUTH_USERNAME'
  JaggaerAuthPassword:
    Description: 'Password for accessing the Jaggaer integration.'
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/esource/jaggaer/JAGGAER_AUTH_PASSWORD'

Resources:
  ApiGatewayAuthorizerRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeAsync
            - lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::Sub: ${CustomAuthorizerFunction.Arn}
          Version: '2012-10-17'
        PolicyName: InvokeAuthorizerFunction
    Type: AWS::IAM::Role

  CustomAuthorizerFunction:
    Properties:
      CodeUri: src/
      Handler: authorizer.handler
      Role:
        Fn::Sub: ${CustomAuthorizerFunctionRole.Arn}
      Runtime: nodejs10.x
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
          COGNITO_CLIENT_ID: !Ref CognitoClientId
    Type: AWS::Serverless::Function

  CustomAuthorizerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  CreateITTFunction:
    Properties:
      CodeUri: src/
      Handler: integration.createITT
      Runtime: nodejs10.x
      Timeout: 20
      Environment:
        Variables:
          JAGGAER_AUTH_USERNAME: !Ref JaggaerAuthUsername
          JAGGAER_AUTH_PASSWORD: !Ref JaggaerAuthPassword
    Type: AWS::Serverless::Function
    
  CreateITTLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - ServerlessRestAPI
    - CreateITTFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateITTFunction
      Principal: apigateway.amazonaws.com

  GetTenderStatusesFunction:
    Properties:
      CodeUri: src/
      Handler: integration.getTenderStatuses
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function

  GetTenderStatusesLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - ServerlessRestAPI
    - GetTenderStatusesFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetTenderStatusesFunction
      Principal: apigateway.amazonaws.com

  GetTenderByIdFunction:
    Properties:
      CodeUri: src/
      Handler: integration.getTenders
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function

  GetTenderByIdLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - ServerlessRestAPI
    - GetTenderByIdFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetTenderByIdFunction
      Principal: apigateway.amazonaws.com

  DeleteTenderFunction:
    Properties:
      CodeUri: src/
      Handler: integration.deleteTender
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function

  DeleteTenderLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - ServerlessRestAPI
    - DeleteTenderFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DeleteTenderFunction
      Principal: apigateway.amazonaws.com

  ServerlessRestAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: default
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: './swagger.yaml'
      Tags:
          Application: ESOURCE_API
          MAJOR_VERSION: !Ref MajorVersion
          MINOR_VERSION: !Ref MinorVersion
