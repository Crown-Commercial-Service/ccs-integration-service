/*
 * Crown Commercial Service
 *
 * This is the Crown Commercial Service API definition. 
 *
 * OpenAPI spec version: 0_5
 * Contact: api@crowncommercial.gov.uk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TenderApiController : ControllerBase
    { 
        /// <summary>
        /// Create an invitiation to tender i.e. a sourcing event
        /// </summary>
        /// <remarks>Creates a CCS invitation to tender on the sourcing platform for a given procurement case.</remarks>
        /// <param name="body">Created sourcing object</param>
        /// <response code="201">tender created</response>
        /// <response code="0">successful operation</response>
        [HttpPost]
        [Route("/Crown-Commercial/crown-commercial-service/0_5/tenders")]
        [ValidateModelState]
        [SwaggerOperation("CreateTender")]
        [SwaggerResponse(statusCode: 201, type: typeof(InlineResponse201), description: "tender created")]
        public virtual IActionResult CreateTender([FromBody]Procurement body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(InlineResponse201));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);
            string exampleJson = null;
            exampleJson = "{\n  \"projectCode\" : \"projectCode\",\n  \"ittCode\" : \"ittCode\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse201>(exampleJson)
                        : default(InlineResponse201);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// (Soft) Delete tender by ID
        /// </summary>
        /// <remarks>For valid response try integer IDs with positive integer value.\\ \\ Negative or non-integer values will generate API errors</remarks>
        /// <param name="id">ID of the tender that needs to be deleted</param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Tender not found</response>
        [HttpDelete]
        [Route("/Crown-Commercial/crown-commercial-service/0_5/tenders/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteTender")]
        public virtual IActionResult DeleteTender([FromRoute][Required]long? id)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Find a tender by ID
        /// </summary>
        /// <remarks>For valid response try integer IDs with value &gt;&#x3D; 1 and &lt;&#x3D; 10.\\ \\ Other values will generated exceptions</remarks>
        /// <param name="id">ID of the tender that needs to be fetched</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Tender not found</response>
        [HttpGet]
        [Route("/Crown-Commercial/crown-commercial-service/0_5/tenders/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetTenderById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Tender), description: "successful operation")]
        public virtual IActionResult GetTenderById([FromRoute][Required][Range(1, 10)]long? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Tender));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"description\" : \"Tender - Laptops for Schools\",\n  \"id\" : 8,\n  \"ittOwner\" : {\n    \"firstName\" : \"joe\",\n    \"lastName\" : \"bloggs\",\n    \"userStatus\" : 6,\n    \"phone\" : \"phone\",\n    \"id\" : 123456,\n    \"email\" : \"joe.bloggs@crowncommercial.gov.uk\",\n    \"username\" : \"joe.bloggs\"\n  },\n  \"status\" : 0\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Tender>(exampleJson)
                        : default(Tender);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get tenders by status
        /// </summary>
        /// <remarks>Returns list of tenders for a given status</remarks>
        /// <response code="200">successful operation</response>
        [HttpGet]
        [Route("/Crown-Commercial/crown-commercial-service/0_5/tenders/status")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetTenders")]
        [SwaggerResponse(statusCode: 200, type: typeof(Dictionary<string, int?>), description: "successful operation")]
        public virtual IActionResult GetTenders()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Dictionary<string, int?>));
            string exampleJson = null;
            exampleJson = "{\n  \"key\" : 0\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Dictionary<string, int?>>(exampleJson)
                        : default(Dictionary<string, int?>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
