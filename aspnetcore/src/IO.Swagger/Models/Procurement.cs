/*
 * Crown Commercial Service
 *
 * This is the Crown Commercial Service API definition. 
 *
 * OpenAPI spec version: 0_5
 * Contact: api@crowncommercial.gov.uk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Procurement : IEquatable<Procurement>
    { 
        /// <summary>
        /// The primary identifier of the procurement case
        /// </summary>
        /// <value>The primary identifier of the procurement case</value>
        [Required]
        [DataMember(Name="reference")]
        public string Reference { get; set; }

        /// <summary>
        /// Title of the procurement case
        /// </summary>
        /// <value>Title of the procurement case</value>
        [Required]
        [DataMember(Name="subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Label indicating the process the procurement case must follow
        /// </summary>
        /// <value>Label indicating the process the procurement case must follow</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RouteEnum
        {
            /// <summary>
            /// Enum CallOffCompetitionEnum for Call Off (Competition)
            /// </summary>
            [EnumMember(Value = "Call Off (Competition)")]
            CallOffCompetitionEnum = 0,
            /// <summary>
            /// Enum CallOffDirectAwardEnum for Call Off (Direct Award)
            /// </summary>
            [EnumMember(Value = "Call Off (Direct Award)")]
            CallOffDirectAwardEnum = 1,
            /// <summary>
            /// Enum OpenMarketEnum for Open Market
            /// </summary>
            [EnumMember(Value = "Open Market")]
            OpenMarketEnum = 2,
            /// <summary>
            /// Enum SingleTenderActionEnum for Single Tender Action
            /// </summary>
            [EnumMember(Value = "Single Tender Action")]
            SingleTenderActionEnum = 3        }

        /// <summary>
        /// Label indicating the process the procurement case must follow
        /// </summary>
        /// <value>Label indicating the process the procurement case must follow</value>
        [Required]
        [DataMember(Name="route")]
        public RouteEnum? Route { get; set; }

        /// <summary>
        /// The date this procurement is planned to go out to tender
        /// </summary>
        /// <value>The date this procurement is planned to go out to tender</value>
        [Required]
        [DataMember(Name="ittPlannedStartDate")]
        public DateTime? IttPlannedStartDate { get; set; }

        /// <summary>
        /// The date the tender is planned or required to close
        /// </summary>
        /// <value>The date the tender is planned or required to close</value>
        [Required]
        [DataMember(Name="ittPlannedEndDate")]
        public DateTime? IttPlannedEndDate { get; set; }

        /// <summary>
        /// The organisation requesting the procurement
        /// </summary>
        /// <value>The organisation requesting the procurement</value>
        [DataMember(Name="organisation")]
        public string Organisation { get; set; }

        /// <summary>
        /// Also known as a framework
        /// </summary>
        /// <value>Also known as a framework</value>
        [Required]
        [DataMember(Name="commercialAgreement")]
        public string CommercialAgreement { get; set; }

        /// <summary>
        /// Also known as a framework lot
        /// </summary>
        /// <value>Also known as a framework lot</value>
        [Required]
        [DataMember(Name="commercialAgreementLot")]
        public string CommercialAgreementLot { get; set; }

        /// <summary>
        /// Gets or Sets CommonAreaofSpendCategory
        /// </summary>
        [DataMember(Name="CommonAreaofSpendCategory")]
        public CommonAreaofSpendCategory CommonAreaofSpendCategory { get; set; }

        /// <summary>
        /// Gets or Sets ProcurementOwner
        /// </summary>
        [DataMember(Name="procurementOwner")]
        public User ProcurementOwner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Procurement {\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Route: ").Append(Route).Append("\n");
            sb.Append("  IttPlannedStartDate: ").Append(IttPlannedStartDate).Append("\n");
            sb.Append("  IttPlannedEndDate: ").Append(IttPlannedEndDate).Append("\n");
            sb.Append("  Organisation: ").Append(Organisation).Append("\n");
            sb.Append("  CommercialAgreement: ").Append(CommercialAgreement).Append("\n");
            sb.Append("  CommercialAgreementLot: ").Append(CommercialAgreementLot).Append("\n");
            sb.Append("  CommonAreaofSpendCategory: ").Append(CommonAreaofSpendCategory).Append("\n");
            sb.Append("  ProcurementOwner: ").Append(ProcurementOwner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Procurement)obj);
        }

        /// <summary>
        /// Returns true if Procurement instances are equal
        /// </summary>
        /// <param name="other">Instance of Procurement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Procurement other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Reference == other.Reference ||
                    Reference != null &&
                    Reference.Equals(other.Reference)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.Equals(other.Subject)
                ) && 
                (
                    Route == other.Route ||
                    Route != null &&
                    Route.Equals(other.Route)
                ) && 
                (
                    IttPlannedStartDate == other.IttPlannedStartDate ||
                    IttPlannedStartDate != null &&
                    IttPlannedStartDate.Equals(other.IttPlannedStartDate)
                ) && 
                (
                    IttPlannedEndDate == other.IttPlannedEndDate ||
                    IttPlannedEndDate != null &&
                    IttPlannedEndDate.Equals(other.IttPlannedEndDate)
                ) && 
                (
                    Organisation == other.Organisation ||
                    Organisation != null &&
                    Organisation.Equals(other.Organisation)
                ) && 
                (
                    CommercialAgreement == other.CommercialAgreement ||
                    CommercialAgreement != null &&
                    CommercialAgreement.Equals(other.CommercialAgreement)
                ) && 
                (
                    CommercialAgreementLot == other.CommercialAgreementLot ||
                    CommercialAgreementLot != null &&
                    CommercialAgreementLot.Equals(other.CommercialAgreementLot)
                ) && 
                (
                    CommonAreaofSpendCategory == other.CommonAreaofSpendCategory ||
                    CommonAreaofSpendCategory != null &&
                    CommonAreaofSpendCategory.Equals(other.CommonAreaofSpendCategory)
                ) && 
                (
                    ProcurementOwner == other.ProcurementOwner ||
                    ProcurementOwner != null &&
                    ProcurementOwner.Equals(other.ProcurementOwner)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Reference != null)
                    hashCode = hashCode * 59 + Reference.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (Route != null)
                    hashCode = hashCode * 59 + Route.GetHashCode();
                    if (IttPlannedStartDate != null)
                    hashCode = hashCode * 59 + IttPlannedStartDate.GetHashCode();
                    if (IttPlannedEndDate != null)
                    hashCode = hashCode * 59 + IttPlannedEndDate.GetHashCode();
                    if (Organisation != null)
                    hashCode = hashCode * 59 + Organisation.GetHashCode();
                    if (CommercialAgreement != null)
                    hashCode = hashCode * 59 + CommercialAgreement.GetHashCode();
                    if (CommercialAgreementLot != null)
                    hashCode = hashCode * 59 + CommercialAgreementLot.GetHashCode();
                    if (CommonAreaofSpendCategory != null)
                    hashCode = hashCode * 59 + CommonAreaofSpendCategory.GetHashCode();
                    if (ProcurementOwner != null)
                    hashCode = hashCode * 59 + ProcurementOwner.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Procurement left, Procurement right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Procurement left, Procurement right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
